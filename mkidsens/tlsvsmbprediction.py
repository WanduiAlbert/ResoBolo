#! /usr/bin/env python3
import numpy as np
import matplotlib as mpl
#label_size = 10
#mpl.rcParams['xtick.labelsize'] = label_size
#mpl.rcParams['ytick.labelsize'] = label_size
import matplotlib.pyplot as plt
from matplotlib.ticker import StrMethodFormatter
from math import pi
from scipy.constants import h,k,e
from scipy.special import digamma, iv,kn
import scipy.integrate as integrate
import scipy.optimize as optimize
import pdb
import corner

K0 = lambda x: kn(0, x)
I0 = lambda x: iv(0, x)

um = 1e-6
nm = 1e-9

Fd = 5.97e-5
Fd = 1.18e-4
#Delta = 0.195e-3*e
Tc0 = 1.284
Delta = 1.764*k*Tc0
alphak = 0.375
N0 = 1.72e10/um**3/e
R = 10.7*um**3#/s
nqp_star = 518/um**3
Vsc = 16200*um**3*50*nm
f00 = 0

#def lnprior_MB(theta):
#	Delta_f = 10
#	Delta_alpha = 1
#	f0, alpha = theta
#	if f0 < 300 or alpha < 0:
#		return -np.inf
#	if f0 > 310 or alpha > 1:
#		return -np.inf
#	return  -np.log(Delta_f*Delta_alpha)
#
#
#def lnprior_MBTLS(theta):
#	Delta_f = 10
#	Delta_alpha = 1
#	Delta_fd = 1.2e-3
#	f0, alpha, fd = theta
#	if f0 < 300 or alpha < 0 or fd < 0:
#		return -np.inf
#	if f0 > 310 or alpha > 1 or fd > 1.2e-3:
#		return -np.inf
#	return  -np.log(Delta_f*Delta_alpha*Delta_fd)
#
#def lnlike_MB(theta, x, y, yerr):
#	inv_sigma2 = 1./yerr**2
#	return -0.5*np.sum((y - model_MB(x, *theta))**2*inv_sigma2) -\
#			np.sum(np.log(yerr)) - x.size*np.log(pi)/2
#
#def lnlike_MBTLS(theta, x, y, yerr):
#	inv_sigma2 = 1./yerr**2
#	return -0.5*np.sum((y - model_MBTLS(x, *theta))**2*inv_sigma2) -\
#			np.sum(np.log(yerr)) - x.size*np.log(pi)/2
#
#def lnprob_MB(theta, x, y, yerr):
#	lp = lnprior_MB(theta)
#	if not np.isfinite(lp):
#		return -np.inf
#	return lp + lnlike_MB(theta, x, y, yerr)
#
#def lnprob_MBTLS(theta, x, y, yerr):
#	lp = lnprior_MBTLS(theta)
#	if not np.isfinite(lp):
#		return -np.inf
#	return lp + lnlike_MBTLS(theta, x, y, yerr)

def model_TLS(T, f0, fd):
	eta = h*f0*1e6/(2*k*T)
	xtls = (fd/pi)*(np.real(digamma(0.5 + eta/pi/1j) - np.log(2*eta)))
	return f0*(1 + xtls)

def model_MB(T, f0, Tc, alphak):
	eta = h*f0*1e6/(2*k*T)
	Delta = 1.763*k*Tc
	nqp = 2*N0*np.sqrt(2*Delta*pi*k*T)*np.exp(-Delta/k/T)
	S2 = 1 + np.sqrt(2*Delta/(pi*k*T))*np.exp(-eta)*I0(eta)
	xmb = -alphak*S2*nqp/(4*N0*Delta)
	return f0*(1 + xmb)

def model_MBTLS(T, f0, Tc, alphak, fd):
	return model_MB(T, f0, Tc, alphak) + model_TLS(T, f0, fd) - f0

def modelQ_full(temps, PdBm, PcdBm,Tc, alpha,fd,dQ0):
	f0 = f00
	Delta = 1.763*k*Tc
	P = 1e-3*10**(PdBm/10)
	Pc = 1e-3*10**(PcdBm/10)
	eta = h*f0*1e6/(2*k*temps)
	S1 = (2/pi)*np.sqrt(2*Delta/(pi*k*temps))*np.sinh(eta)*K0(eta)
	nth = 2*N0*np.sqrt(2*pi*k*temps*Delta)*np.exp(-Delta/k/temps)
	eta_pow = 0*1e-11
	#P0 = Delta*R*Vsc*nqp_star**2/(2*eta_pow)
	nqp = np.sqrt((nth + nqp_star)**2 + 2*eta_pow*P/(Delta*R*Vsc)) - nqp_star
	#dQMB = alpha*S1/(2*N0*Delta)*nqp
	dQMB = 4*alpha/np.pi*np.sinh(eta)*K0(eta)*np.exp(-Delta/k/temps)
	dQTLS = fd*np.tanh(eta)/np.sqrt(1 + P/Pc)
	dQ = dQ0 + dQMB + dQTLS
	#_, QMB = self.xQMB(temps,f0,Tc,alpha)
	#dQ = 1/QMB + 1/Q0
	return dQ

def modelx_full(temps, PdBm, PcdBm,Tc,alpha,fd,dQ0):
	f0 = f00*1e6
	Delta = 1.763*k*Tc 
	P = 1e-3*10**(PdBm/10)
	Pc = 1e-3*10**(PcdBm/10)
	eta = h*f0/(2*k*temps)
	S1 = (2/pi)*np.sqrt(2*Delta/(pi*k*temps))*np.sinh(eta)*K0(eta)
	S2 = 1 + np.sqrt(2*Delta/(pi*k*temps))*np.exp(-eta)*I0(eta)
	nth = 2*N0*np.sqrt(2*pi*k*temps*Delta)*np.exp(-Delta/k/temps)
	eta_pow = 0*1e-11
	#P0 = Delta*R*Vsc*nqp_star**2/(2*eta_pow)
	nqp = np.sqrt((nth + nqp_star)**2 + 2*eta_pow*P/(Delta*R*Vsc)) - nqp_star
	xMB = -alpha*S2/(4*N0*Delta)*nth
	xTLS = fd/pi*(np.real(digamma(0.5 + eta/(pi*1j))) - np.log(2*eta))/np.sqrt(1 + P/Pc)
	x = xMB + xTLS
	#_, QMB = self.xQMB(temps,f0,Tc,alpha)
	#dQ = 1/QMB + 1/Q0
	return f0*(1 + x)

def modeldQMB_full(temps,Tc, alpha,dQ0):
	f0 = f00
	Delta = 1.763*k*Tc
	eta = h*f0*1e6/(2*k*temps)
	S1 = (2/pi)*np.sqrt(2*Delta/(pi*k*temps))*np.sinh(eta)*K0(eta)
	S2 = 1 + np.sqrt(2*Delta/(pi*k*temps))*np.exp(-eta)*I0(eta)
	nth = 2*N0*np.sqrt(2*pi*k*temps*Delta)*np.exp(-Delta/k/temps)
	dQMB = alpha*S1/(2*N0*Delta)*nth
	dQ = dQMB + dQ0
	return dQ

def modelxMB_full(temps, f0, Tc, alpha):
	#f0 = f00
	f0 *= 1e6
	Delta = 1.763*k*Tc
	eta = h*f0/(2*k*temps)
	S1 = (2/pi)*np.sqrt(2*Delta/(pi*k*temps))*np.sinh(eta)*K0(eta)
	S2 = 1 + np.sqrt(2*Delta/(pi*k*temps))*np.exp(-eta)*I0(eta)
	nth = 2*N0*np.sqrt(2*pi*k*temps*Delta)*np.exp(-Delta/k/temps)
	xMB = -alpha*S2/(4*N0*Delta)*nth
	x = xMB
	return f0*(1 + x)

def modelQ_TLS(PdBm, PcdBm, fd, dQ0):
	P = 1e-3*10**(PdBm/10)
	Pc = 1e-3*10**(PcdBm/10)
	dQTLS = fd/np.sqrt(1 + P/Pc)
	dQ = dQ0 + dQTLS
	return dQ

def modelQ_sumTLS(PdBm, Pc1dBm, fd1, Pc2dBm, fd2, dQ0):
	P = 1e-3*10**(PdBm/10)
	Pc1 = 1e-3*10**(Pc1dBm/10)
	Pc2 = 1e-3*10**(Pc2dBm/10)
	dQTLS = fd1/np.sqrt(1 + P/Pc1) + fd2/np.sqrt(1 + P/Pc2)
	dQ = dQ0 + dQTLS
	#_, QMB = self.xQMB(temps,f0,Tc,alpha)
	#dQ = 1/QMB + 1/Q0
	return dQ

#T = np.r_[80:500:1000j]*1e-3
#frT = model_MBTLS(T, 337, 0.375, 5e-5)
#x = (frT - 337)/337 * 1e6
#print (np.max(x))
#print (np.min(x))
#exit()

for reso in range(4):
	if reso == 0:
		freqs = np.array([305.86059223, 305.86067526, 305.86086568, 305.8611104, 305.86108787
		, 305.85969707, 305.85360832, 305.83606917, 305.79755159, 305.72763474
		, 305.6150745, 305.44953915, 305.22073955, 304.53835208])
		sig_freqs = np.array([3.44615953e-05, 3.78230035e-05, 2.47117390e-05, 3.13176887e-05
		, 3.76718665e-05, 3.38195458e-05, 3.13000017e-05, 3.33536095e-05
		, 4.81229223e-05, 4.74525067e-05, 6.25066941e-05, 1.15786592e-04
		, 1.53444285e-04, 4.15969332e-04])
		dQis = np.array([5.69496065e-06, 5.65705202e-06, 5.62321977e-06, 5.50592487e-06
		, 5.47761574e-06, 5.75223669e-06, 6.97018302e-06, 1.02990841e-05
		, 1.77008246e-05, 3.13364798e-05, 5.41098517e-05, 8.81384572e-05
		, 1.34952865e-04, 2.64375502e-04])
		sig_dQis = np.array([1.22291088e-07, 1.33580508e-07, 1.36670021e-07, 1.59098149e-07
		, 1.36065430e-07, 1.42907666e-07, 1.41757118e-07, 1.47369749e-07
		, 1.31117059e-07, 1.74642942e-07, 1.82991561e-07, 3.70944202e-07
		, 4.50342293e-07, 1.22045828e-06])
		#freqs = np.array([305.86020699, 305.86063355, 305.86067607, 305.86049015, 305.86018179
		#, 305.85903225, 305.85352673, 305.83580147, 305.79729743, 305.72762616
		#, 305.61521639, 305.44956012, 305.22099959, 304.53848681])
		#sig_freqs = np.array([5.64637104e-03, 2.36107196e-03, 2.04165301e-03, 3.57555558e-03
		#, 4.54068338e-03, 4.03898834e-03, 2.39655199e-03, 3.96066832e-03
		#, 2.42600072e-03, 4.26814054e-05, 1.39155840e-03, 6.08930677e-05
		#, 3.10241524e-03, 1.28934841e-04])
		#dQis = np.array([4.40480864e-06, 4.11773648e-06, 6.01181130e-06, 5.27052336e-06
		#, 5.06825739e-06, 5.69270663e-06, 6.87151854e-06, 1.17706780e-05
		#, 1.75020508e-05, 3.13383987e-05, 5.36823500e-05, 8.81838341e-05
		#, 1.34110717e-04, 2.63750013e-04])
		#sig_dQis = np.array([2.24073162e-05, 2.13463126e-05, 7.62839858e-06, 1.41415638e-05
		#, 1.56737117e-05, 1.75423938e-05, 6.38768421e-06, 2.89790825e-05
		#, 9.93535871e-06, 2.45014332e-07, 7.92805352e-06, 4.17043255e-07
		#, 1.32280262e-05, 4.30411766e-07])
		temps = np.array([0.0938268, 0.1121982, 0.13377, 0.1579252, 0.184643,
			0.2124424, 0.2406298, 0.2668489, 0.2948913, 0.322078, 0.3494377,
			0.376107, 0.4032548, 0.4583795])


		#freqs = np.array([305.86059008, 305.86066502, 305.86086423, 305.86110364, 305.86109398,
		#		305.85970369, 305.85361103, 305.83606791, 305.79754226, 305.72762726,
		#		305.6150822, 305.44955918, 305.22076143, 304.92011109,
		#		304.5384839])
		#sig_freqs = np.array([1.20237046e-05, 1.15541356e-05, 1.14968928e-05, 1.15151212e-05,
		#		1.14127660e-05, 1.12336414e-05, 1.16159557e-05, 1.32199820e-05,
		#		1.70687924e-05, 2.40248390e-05, 3.40446546e-05, 4.84181780e-05,
		#		6.53561690e-05, 9.22756401e-05, 7.27309526e-05])*1e6

		#dQis = np.array([5.69219085e-06, 5.66930223e-06, 5.60601132e-06, 5.51828100e-06,
		#	5.47714264e-06, 5.75559643e-06, 6.97184974e-06, 1.03273814e-05,
		#	1.76859468e-05, 3.13170355e-05, 5.41043586e-05, 8.81643871e-05,
		#	1.35016331e-04, 1.93855444e-04, 2.63826987e-04])
		#sig_dQis = np.array([4.35566638e-08, 4.20807555e-08, 4.17772567e-08, 4.16051330e-08,
		#	4.13941533e-08, 4.07624485e-08, 4.21502899e-08, 4.70551830e-08,
		#	5.82042726e-08, 7.77401583e-08, 1.04974898e-07, 1.43072843e-07,
		#	1.57955125e-07, 2.60940470e-07, 3.58375069e-07])
		#temps = np.array([0.0937905, 0.112146, 0.13374375, 0.15775525, 0.184487, 0.212209,
		#	0.239644, 0.26691125, 0.29596325, 0.3223, 0.3491035, 0.376752,
		#	0.403754, 0.43042875, 0.459217])
		p0 = [0.37, 5.97e-6, 3.32e-6]
		Pc_nominal = -96.6

		freqmeas = np.array([305.86045053, 305.860395, 305.86053816, 305.86042914, 305.86049631
		, 305.86036397, 305.86036172, 305.86049154, 305.86049875, 305.86058046
		, 305.86069309, 305.86102875, 305.86096491, 305.86122749, 305.86147844
		, 305.8619137])
		sig_freqmeas = np.array([4.13224550e-05, 3.08495008e-05, 4.72976661e-05, 3.57294793e-05
		, 3.14042679e-05, 4.09441697e-05, 3.21725820e-05, 4.08830510e-05
		, 4.37353377e-05, 3.27090100e-05, 4.28235167e-05, 3.19154963e-05
		, 3.21066947e-05, 2.90685120e-05, 3.53343156e-05, 2.66614514e-05])
		Qimeas = np.array([121038.00989103, 123005.50305582, 123189.20054116, 128797.84155993
		, 131981.78616305, 138007.35052493, 146760.00987764, 154995.71885141
		, 165360.63822952, 178592.4052326, 176787.30417343, 189274.74692681
		, 209279.35054245, 227303.4031207, 241345.90012098, 248442.51958946])
		dQimeas = 1./Qimeas
		sig_dQimeas = np.array([1.32423777e-07, 1.14349020e-07, 1.17789501e-07, 1.28039140e-07
		, 1.56480754e-07, 1.08805935e-07, 1.40743079e-07, 1.01368401e-07
		, 1.21304485e-07, 1.44044474e-07, 1.01417953e-07, 1.24419345e-07
		, 1.20754312e-07, 1.21627062e-07, 1.44891734e-07, 1.56388207e-07])

		#freqmeas = np.array([305.86013492, 305.85972944, 305.86076032,
		#	305.85940865, 305.86014678, 305.86130553, 305.8591439, 305.86013895,
		#	305.85939591, 305.85995921 , 305.86009754, 305.86090619,
		#	305.86144782, 305.86077974, 305.86146227 , 305.86191121])
		#sig_freqmeas = np.array([2.98769332e-03, 3.74430038e-03, 4.94910975e-03,
		#	5.27233178e-03 , 3.43625095e-03, 8.85237923e-03, 6.81259632e-03,
		#	3.71129862e-03 , 4.91866374e-03, 3.91218120e-03, 4.41554741e-03,
		#	6.51349868e-03 , 4.93938786e-03, 3.81190450e-03, 3.11783458e-03,
		#	1.95501341e-05])
		#Qimeas = np.array([138749.06634223, 129961.9163719, 169656.07397392, 146124.96645785
		#		, 136843.9105775, 153886.19500165, 218463.49121018, 156229.47060898
		#		, 197222.57764065, 191835.54452428, 166717.16954609, 341056.26068462
		#		, 235798.68151732, 192675.24585568, 187380.34043505, 249436.84240879])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([1.94307803e-05, 1.49394131e-05, 2.59536339e-05,
		#		2.76847288e-05 , 1.23511152e-05, 1.91280454e-05, 2.95887172e-05, 1.82291948e-05
		#		, 2.43351543e-05, 2.10535119e-05, 1.30001613e-05, 2.41702895e-05
		#		, 1.57119903e-05, 2.09630700e-05, 1.40635439e-05, 5.29413958e-08])
		#Qimeas = np.array([121110.57460636, 122669.16604493, 123142.58374422, 128432.59410499
		#, 131956.46580733, 137947.42926804, 146663.9509832, 155142.33360295
		#, 165917.74003414, 179133.56791838, 177079.26148578, 189305.69249632
		#, 209687.10645237, 227498.81601318, 241639.79376544, 249301.14019799])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([3.23107374e-07, 2.55931067e-07, 2.01254811e-07,
		#	1.61876628e-07 , 1.30137450e-07, 1.03736917e-07, 8.32095536e-08,
		#	6.70722324e-08 , 5.54761222e-08, 4.66146669e-08, 4.23375542e-08,
		#	3.64492282e-08 , 3.38960991e-08, 3.04618999e-08, 2.87501990e-08,
		#	2.67624569e-08])
	elif reso == 1:
		freqs = np.array([318.40981493, 318.40988208, 318.41002359, 318.41018861, 318.41010877
		, 318.40860742, 318.40205525, 318.38323413, 318.34223039, 318.26811847
		, 318.14930677, 317.97513938, 317.73458465, 317.0174605, ])
		sig_freqs = np.array([4.11778942e-05, 3.75303057e-05, 3.29567740e-05, 3.75735749e-05
		, 3.34051580e-05, 3.17570127e-05, 3.60649717e-05, 3.44756448e-05
		, 4.94710495e-05, 5.48931549e-05, 8.21032023e-05, 1.19584884e-04
		, 1.66924126e-04, 5.63857059e-04])
		dQis = np.array([4.38779019e-06, 4.36234807e-06, 4.36721175e-06, 4.20978404e-06
		, 4.35469168e-06, 4.66634213e-06, 5.90816826e-06, 9.51173530e-06
		, 1.74424173e-05, 3.23492218e-05, 5.70319761e-05, 9.32963978e-05
		, 1.43070840e-04, 2.77806909e-04])
		sig_dQis = np.array([1.12721537e-07, 1.27020637e-07, 1.18394685e-07, 1.17995587e-07
		, 1.24433754e-07, 1.31914625e-07, 1.13707134e-07, 1.05418136e-07
		, 1.14127382e-07, 1.94156615e-07, 3.24440827e-07, 3.95731763e-07
		, 6.67190725e-07, 1.24213826e-06])
		#freqs = np.array([318.41007216, 318.41030455, 318.41002267, 318.41019449, 318.40988104
		#, 318.40901486, 318.40203783, 318.38316189, 318.34249599, 318.26836361
		#, 318.14931191, 317.97514147, 317.73526749, 317.01760161])
		#sig_freqs = np.array([6.45769183e-03, 4.23146551e-03, 1.38207877e-05, 1.10004382e-05
		#, 2.83181503e-03, 2.83500716e-03, 1.80748404e-04, 7.30323295e-04
		#, 2.70582109e-03, 2.58798320e-03, 1.27088137e-04, 1.17277149e-04
		#, 6.18139621e-03, 1.52947729e-04])
		#dQis = np.array([8.29117363e-06, 5.00609551e-06, 4.37659732e-06, 4.24665534e-06
		#, 5.28561347e-06, 5.76110199e-06, 6.22582252e-06, 9.40398779e-06
		#, 1.73649883e-05, 3.21640123e-05, 5.69702581e-05, 9.32879104e-05
		#, 1.41943199e-04, 2.77978757e-04])
		#sig_dQis = np.array([2.80965998e-05, 1.00262054e-05, 5.56914752e-08, 4.77447232e-08
		#, 1.26998117e-05, 1.29267619e-05, 5.05328701e-06, 4.36336148e-06
		#, 3.62530716e-06, 6.24985763e-06, 4.76214003e-07, 4.61813772e-07
		#, 1.70497574e-05, 4.31327701e-07])
		temps = np.array([0.0938268, 0.1121982, 0.13377, 0.1579252, 0.184643,
			0.2124424, 0.2406298, 0.2668489, 0.2948913, 0.322078, 0.3494377,
			0.376107, 0.4032548, 0.4583795])

		#freqs = np.array([318.40981885, 318.40988195, 318.41002435, 318.41019758, 318.41010659
		#, 318.40860572, 318.40205541, 318.3832347, 318.34222055, 318.26812574
		#, 318.1493097, 317.97514016, 317.73465912, 317.4187978, 317.0176201])
		#sig_freqs = np.array([1.00238177e-05, 9.86053077e-06, 1.01553507e-05, 9.67544865e-06
		#, 9.63609810e-06, 9.80074221e-06, 1.02447698e-05, 1.24864311e-05
		#, 1.97201962e-05, 3.37609544e-05, 4.48649385e-05, 5.52476856e-05
		#, 7.16203685e-05, 9.95105351e-05, 1.45846678e-04])*1e6
		#dQis = np.array([4.38464075e-06, 4.36688591e-06, 4.37404284e-06, 4.24408536e-06
		#, 4.35535157e-06, 4.68289176e-06, 5.90531499e-06, 9.51580499e-06
		#, 1.74076403e-05, 3.23670594e-05, 5.69759119e-05, 9.32808878e-05
		#, 1.43126300e-04, 2.05130836e-04, 2.77964638e-04])
		#sig_dQis = np.array([3.64694472e-08, 3.56859318e-08, 3.66028311e-08, 3.50729839e-08
		#, 3.51041175e-08, 3.54897774e-08, 3.70000110e-08, 4.35853714e-08
		#, 6.53328780e-08, 1.05286030e-07, 1.33518483e-07, 1.58473021e-07
		#, 1.99189657e-07, 2.72259031e-07, 3.93617831e-07])
		#temps = np.array([0.0937905, 0.112146, 0.13374375, 0.15775525, 0.184487, 0.212209
		#, 0.239644, 0.26691125, 0.29596325, 0.3223, 0.3491035, 0.376752
		#, 0.403754, 0.43042875, 0.459217])
		p0 = [0.37, 5.48e-6, 2.14e-6]
		Pc_nominal = -99.1

		freqmeas = np.array([318.40971602, 318.40978148, 318.4096727, 318.40975563, 318.40975466
		, 318.40971958, 318.40967204, 318.40969695, 318.40981451, 318.40983184
		, 318.40991597, 318.41032375, 318.41031856, 318.41046567, 318.41071678
		, 318.41117232])
		sig_freqmeas = np.array([4.28585237e-05, 3.01358952e-05, 2.98601186e-05, 3.26806184e-05
		, 2.86295484e-05, 3.00528224e-05, 3.32914316e-05, 3.34541058e-05
		, 2.48108035e-05, 4.43871620e-05, 3.69430152e-05, 3.25194012e-05
		, 3.67349623e-05, 3.58498806e-05, 2.69666408e-05, 2.30697662e-05])
		Qimeas = np.array([136008.08424095, 138880.16334701, 145585.42026999, 156761.56135536
		, 165710.33065082, 172262.83716098, 181772.64598676, 199005.58292293
		, 206448.92561209, 226304.71101226, 230286.07402725, 239882.44109038
		, 271415.17423979, 293886.25900095, 328574.96059214, 362663.66889577])
		dQimeas = 1./Qimeas
		sig_dQimeas = np.array([1.51430328e-07, 1.21851972e-07, 1.13249636e-07, 1.15886543e-07
		, 1.32449862e-07, 1.59737732e-07, 9.53961176e-08, 8.60883752e-08
		, 1.76006660e-07, 1.25972815e-07, 1.59876939e-07, 1.05212585e-07
		, 1.38668618e-07, 1.36417116e-07, 1.34752184e-07, 9.35078437e-08])

		#freqmeas = np.array([318.40982401, 318.40933727, 318.40967682, 318.41047798, 318.40952174
		#, 318.40971954, 318.40933635, 318.40946037, 318.41030664, 318.41062648
		#, 318.40989776, 318.41040397, 318.41163099, 318.41050274, 318.41086026
		#, 318.4113885])
		#sig_freqmeas = np.array([1.14996664e-03, 3.19986857e-03, 6.88647037e-05, 7.03725512e-03
		#, 2.40695023e-03, 3.05322643e-05, 3.27027676e-03, 2.32532524e-03
		#, 4.90975756e-03, 5.04437185e-03, 1.22728420e-05, 5.84688297e-04
		#, 9.63042601e-03, 5.07580127e-04, 1.45091052e-03, 2.43041947e-03])
		#Qimeas = np.array([144212.52451658, 139225.53441916, 137919.70177689, 156353.78971543
		#, 168434.15411619, 172518.82144659, 186472.6654531, 201299.10558493
		#, 202514.36298855, 142215.45594592, 230205.6343624, 196300.01967029
		#, 180162.12417706, 263938.71124728, 274328.73505368, 363918.2514507])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([8.19572515e-06, 8.95143171e-06, 6.08576153e-06, 6.94772482e-06
		#, 8.31843724e-06, 9.69199213e-08, 7.44850143e-06, 7.58294357e-06
		#, 4.58981558e-06, 2.70643659e-05, 5.31364321e-08, 9.63874643e-06
		#, 2.07237858e-05, 5.22101220e-06, 7.68948395e-06, 5.50474683e-06])
		#Qimeas = np.array([135645.41528793, 139205.88509149, 145710.54935901, 156760.99094121
		#, 165709.24740935, 171914.16271628, 182203.56401282, 199273.29630365
		#, 206679.61508612, 226864.18769458, 230564.23887431, 240734.64248795
		#, 269030.73103401, 295394.96836985, 329916.99557954, 360951.11727526])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([3.02093496e-07, 2.36540361e-07, 1.91365900e-07, 8.35531076e-08
		#, 1.18744479e-07, 6.23800656e-08, 7.64740858e-08, 6.31710763e-08
		#, 5.10818874e-08, 4.24946978e-08, 3.58720435e-08, 3.26877796e-08
		#, 3.14123841e-08, 2.81418941e-08, 2.62083715e-08, 2.71876507e-08])

	elif reso == 2:
		freqs = np.array([337.43516109, 337.43522819, 337.43534604, 337.43551891, 337.4353746
		, 337.4336751, 337.42639285, 337.40568507, 337.36135288, 337.28211483
		, 337.15599879, 336.97124663, 336.71651417, 335.95834217])
		sig_freqs = np.array([2.86994423e-05, 3.14341847e-05, 3.05910685e-05, 3.35194244e-05
		, 2.57861880e-05, 2.75051185e-05, 3.39056134e-05, 3.37720570e-05
		, 5.02209221e-05, 6.09800508e-05, 1.24418996e-04, 1.58934277e-04
		, 3.55067554e-04, 8.36030200e-04])
		dQis = np.array([4.24266116e-06, 4.25592658e-06, 4.23573500e-06, 4.22995496e-06
		, 4.20929093e-06, 4.53458814e-06, 5.99420366e-06, 1.01728367e-05
		, 1.92582486e-05, 3.63708816e-05, 6.38866670e-05, 1.03723508e-04
		, 1.55745065e-04, 2.94955659e-04])
		sig_dQis = np.array([9.35653788e-08, 9.67398812e-08, 9.12135808e-08, 7.57536580e-08
		, 1.04381986e-07, 1.12442145e-07, 8.90414414e-08, 8.59985455e-08
		, 1.54017886e-07, 2.45381908e-07, 2.59560893e-07, 4.64438161e-07
		, 7.55144662e-07, 1.84192953e-06])
		#freqs = np.array([337.43515845, 337.43523256, 337.43534212, 337.4355153, 337.43565058
		#, 337.43367075, 337.42648667, 337.40566096, 337.3613599, 337.28208112
		#, 337.15602426, 336.97155442, 336.71647899, 335.95826286])
		#sig_freqs = np.array([1.30385342e-05, 1.67787013e-05, 1.22481362e-05, 1.36111953e-05
		#, 2.72764984e-03, 1.29008591e-05, 8.10143983e-04, 6.31987252e-04
		#, 9.56630548e-05, 1.44510719e-04, 1.67187895e-04, 3.29016647e-03
		#, 9.28410369e-05, 2.29596025e-04])
		#dQis = np.array([4.25543885e-06, 4.62570064e-06, 4.23707973e-06, 4.23828656e-06
		#, 4.19601499e-06, 4.53560696e-06, 7.14697661e-06, 1.11535037e-05
		#, 1.92740259e-05, 3.63592685e-05, 6.38643662e-05, 1.02832391e-04
		#, 1.55710650e-04, 2.94975912e-04])
		#sig_dQis = np.array([5.91274514e-08, 5.39159295e-06, 5.74923591e-08, 5.06599451e-08
		#, 4.16803584e-06, 5.11881011e-08, 1.10520102e-05, 9.64029228e-06
		#, 3.61391725e-07, 4.76738933e-07, 5.42214985e-07, 1.35280122e-05
		#, 3.37090273e-07, 5.65552231e-07])
		temps = np.array([0.0938268, 0.1121982, 0.13377, 0.1579252, 0.184643,
			0.2124424, 0.2406298, 0.2668489, 0.2948913, 0.322078, 0.3494377,
			0.376107, 0.4032548, 0.4583795])
		#freqs = np.array([337.43516397, 337.43523128, 337.43534326, 337.43551488, 337.43537871
		#, 337.43367222, 337.42639632, 337.40568665, 337.36136586, 337.28210943
		#, 337.15600038, 336.97121647, 336.71648147, 336.38231402, 335.95829275])
		#sig_freqs = np.array([9.64037593e-06, 9.69609435e-06, 9.66345775e-06, 9.75277505e-06
		#, 9.48184726e-06, 9.70459194e-06, 1.04309771e-05, 1.45909038e-05
		#, 2.59778128e-05, 4.01779086e-05, 5.34011571e-05, 6.25418789e-05
		#, 9.02893536e-05, 1.34573074e-04, 1.92963744e-04])*1e6
		#dQis = np.array([4.25090608e-06, 4.24824839e-06, 4.23091273e-06, 4.23685550e-06
		#, 4.19416309e-06, 4.52905255e-06, 5.98809101e-06, 1.01815852e-05
		#, 1.92662820e-05, 3.63514261e-05, 6.38821675e-05, 1.03753153e-04
		#, 1.55693936e-04, 2.20421438e-04, 2.94826706e-04])
		#sig_dQis = np.array([3.28112227e-08, 1.86672237e-08, 3.27296781e-08, 3.29672750e-08
		#, 3.22518202e-08, 2.49698215e-08, 2.07216277e-08, 4.64364043e-08
		#, 4.80264719e-08, 1.13862524e-07, 1.45635953e-07, 1.65254502e-07
		#, 1.31197371e-07, 1.82317702e-07, 5.02587650e-07])
		#temps = np.array([0.0937905, 0.112146, 0.13374375, 0.15775525, 0.184487, 0.212209
		#, 0.239644, 0.26691125, 0.29596325, 0.3223, 0.3491035, 0.376752
		#, 0.403754, 0.43042875, 0.459217])
		p0 = [0.37, 5.48e-6, 2.14e-6]
		Pc_nominal = -95.3

		freqmeas = np.array([337.43509411, 337.43507071, 337.43508573, 337.43511474, 337.43514614
		, 337.43517724, 337.43505208, 337.4350944, 337.43516715, 337.43520952
		, 337.43526108, 337.43557544, 337.43552859, 337.43568276, 337.43587997
		, 337.4361774])
		sig_freqmeas = np.array([3.28526089e-05, 3.24956483e-05, 2.30412116e-05, 3.06177074e-05
		, 3.20981990e-05, 3.12934574e-05, 3.57340133e-05, 3.18463860e-05
		, 3.01778419e-05, 3.38692173e-05, 1.99393030e-05, 2.64875357e-05
		, 3.13858376e-05, 2.60843168e-05, 2.63143134e-05, 2.97835829e-05])
		Qimeas = np.array([140574.34591466, 153099.62778401, 158466.76653237, 157528.92446362
		, 169047.31366508, 178122.44589414, 189765.87976728, 202896.5763349
		, 215621.38229098, 230297.07930671, 235208.6957318, 254474.51386766
		, 282990.80430148, 316903.9253543, 345794.64331867, 373154.77814448])
		dQimeas = 1./Qimeas
		sig_dQimeas = np.array([9.27192163e-08, 1.19919194e-07, 8.82934647e-08, 9.85378615e-08
		, 9.55217439e-08, 1.19878483e-07, 1.16801486e-07, 1.07864457e-07
		, 1.02852982e-07, 1.05039682e-07, 1.01118548e-07, 8.63177579e-08
		, 1.11980839e-07, 1.11189588e-07, 8.66567696e-08, 1.11256856e-07])

		#freqmeas = np.array([337.43508672, 337.43510138, 337.43508976, 337.43510543, 337.43511611
		#, 337.43517798, 337.43504629, 337.43509776, 337.43519606, 337.43520938
		#, 337.4352589, 337.43557796, 337.43554046, 337.43568569, 337.43598451
		#, 337.43625383])
		#sig_freqmeas = np.array([3.09362285e-04, 1.34915754e-04, 4.81884389e-05, 3.46161914e-05
		#, 1.02845430e-03, 3.15517506e-05, 2.96148038e-05, 1.79571648e-05
		#, 3.09292505e-04, 4.19103086e-05, 1.18325097e-05, 9.99030819e-06
		#, 1.48052054e-04, 1.35898602e-04, 8.12133827e-04, 7.10511253e-04])
		#Qimeas = np.array([129352.30957399, 141658.70278759, 158458.30915705, 157685.60307631
		#, 144137.58140838, 170416.02624648, 189928.13440254, 203017.50644322
		#, 188113.23016863, 230519.04689383, 235034.01419246, 253435.06991465
		#, 280232.99498657, 299545.43287241, 281725.55546776, 267300.11285697])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([7.11254221e-06, 7.60517431e-06, 1.82595339e-07, 1.48323943e-07
		#, 1.09147630e-05, 4.34486018e-06, 9.07270423e-08, 6.06006876e-08
		#, 7.67951845e-06, 4.63710683e-08, 6.40328470e-08, 4.88722645e-08
		#, 8.05657791e-07, 2.90567359e-06, 6.49925670e-06, 9.85009550e-06])

		#Qimeas = np.array([140730.13666033, 153702.35680983, 158334.13278159, 157478.41801225
		#, 168718.28658658, 178385.19158995, 190071.95577681, 202970.52077565
		#, 215575.17163196, 230438.80082749, 235461.90075582, 253908.58879095
		#, 284580.26569367, 318126.25711468, 349895.94021596, 375450.71169716])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([2.64799865e-07, 2.06912299e-07, 1.65714116e-07, 1.30386183e-07
		#, 1.06116568e-07, 8.14223879e-08, 6.81442703e-08, 5.51871182e-08
		#, 4.53718574e-08, 3.72907476e-08, 3.27729277e-08, 2.89515684e-08
		#, 2.75515643e-08, 2.48653775e-08, 2.31844962e-08, 2.15663272e-08])

	elif reso == 3:
		freqs = np.array([351.49333367, 351.49337982, 351.49351407, 351.49366769, 351.49347004
		, 351.49146117, 351.48335287, 351.46074677, 351.41288434, 351.32909929
		, 351.19644695, 351.00259726, 350.73523007, 349.94150532])
		sigfreqs = np.array([2.11504110e-05, 2.70907793e-05, 3.26198693e-05, 4.07799244e-05
		, 3.39526451e-05, 3.08555436e-05, 3.96366004e-05, 3.99634506e-05
		, 5.49071637e-05, 1.06114412e-04, 1.51819832e-04, 2.24586443e-04
		, 4.22586848e-04, 7.63362634e-04])
		dQis = np.array([4.08080298e-06, 4.09459007e-06, 4.01835096e-06, 3.98949754e-06
		, 3.99998657e-06, 4.52643152e-06, 6.32272200e-06, 1.12693534e-05
		, 2.19088281e-05, 4.11961052e-05, 7.08717827e-05, 1.12824694e-04
		, 1.66706303e-04, 3.09627401e-04])
		sig_dQis = np.array([1.00551784e-07, 1.10149464e-07, 9.53547641e-08, 8.18504484e-08
		, 8.11384241e-08, 1.01661016e-07, 1.27439088e-07, 1.25219387e-07
		, 1.41493351e-07, 2.37983492e-07, 3.22530000e-07, 5.59254050e-07
		, 7.91228466e-07, 1.87653736e-06])
		#freqs = np.array([351.49332711, 351.49338996, 351.49351904, 351.49377482, 351.49345939
		#, 351.49145512, 351.48333803, 351.46073915, 351.41289304, 351.32932986
		#, 351.19645125, 351.00257537, 350.73564091, 349.94150786])
		#sig_freqs = np.array([3.01907782e-05, 1.80190594e-05, 7.30974845e-05, 9.08544554e-04
		#, 1.41976992e-05, 6.35758828e-05, 7.73960440e-05, 3.47470771e-05
		#, 1.02417244e-04, 2.15863641e-03, 1.23436048e-04, 1.13714089e-04
		#, 3.39851132e-03, 2.66616283e-04])
		#dQis = np.array([4.10296620e-06, 4.48730776e-06, 3.93542032e-06, 4.33525491e-06
		#, 4.01626600e-06, 4.89389536e-06, 6.60174842e-06, 1.12657668e-05
		#, 2.19457906e-05, 4.08781764e-05, 7.09214138e-05, 1.12753374e-04
		#, 1.65281707e-04, 3.09341589e-04])
		#sig_dQis = np.array([6.82219329e-08, 6.27714554e-06, 1.78018456e-06, 8.18188838e-06
		#, 2.20348305e-07, 6.05959132e-06, 3.99360848e-06, 1.53372164e-07
		#, 2.92786057e-07, 8.92346571e-06, 4.90033870e-07, 4.02403135e-07
		#, 1.63564384e-05, 7.01495999e-07])
		temps = np.array([0.0938268, 0.1121982, 0.13377, 0.1579252, 0.184643,
			0.2124424, 0.2406298, 0.2668489, 0.2948913, 0.322078, 0.3494377,
			0.376107, 0.4032548, 0.4583795])
		#freqs = np.array([351.49333055, 351.49338869, 351.49351246, 351.49366552, 351.49345729
		#, 351.4914618, 351.48334751, 351.46074166, 351.41289956, 351.32911837
		#, 351.19643784, 351.00259219, 350.73529048, 350.38460043, 349.94146574])
		#sig_freqs = np.array([1.42324164e-05, 1.40544377e-05, 1.38128807e-05, 1.40797376e-05
		#, 1.39414232e-05, 1.38521335e-05, 1.45350525e-05, 1.87774806e-05
		#, 3.04781345e-05, 4.72338098e-05, 6.13253425e-05, 8.55904628e-05
		#, 1.25174790e-04, 1.85096897e-04, 1.21883662e-04])*1e6
		#dQis = np.array([4.08991737e-06, 4.08816103e-06, 4.02253745e-06, 3.98735831e-06
		#, 3.84863354e-06, 4.51513933e-06, 6.33192622e-06, 1.12507658e-05
		#, 2.19319670e-05, 4.12012349e-05, 7.08719479e-05, 1.12742831e-04
		#, 1.66540807e-04, 2.31698346e-04, 3.09291389e-04])
		#sig_dQis = np.array([4.21652956e-08, 4.17750088e-08, 4.13341839e-08, 4.16172933e-08
		#, 1.81598185e-08, 2.29061444e-08, 4.26148648e-08, 5.35581365e-08
		#, 6.79154721e-08, 1.24378188e-07, 1.56928537e-07, 2.13656713e-07
		#, 3.06922563e-07, 4.53061278e-07, 6.74174777e-07])
		#temps = np.array([0.0937905, 0.112146, 0.13374375, 0.15775525, 0.184487, 0.212209
		#, 0.239644, 0.26691125, 0.29596325, 0.3223, 0.3491035, 0.376752
		#, 0.403754, 0.43042875, 0.459217])
		p0 = [0.37, 5.48e-6, 2.14e-6]
		Pc_nominal = -95.1

		freqmeas = np.array([351.49361781, 351.49325387, 351.49338088, 351.49338892, 351.493338
		, 351.49323254, 351.49325798, 351.49328122, 351.49330302, 351.49331748
		, 351.49342896, 351.49350963, 351.49342861, 351.49360932, 351.49379853
		, 351.49398673])
		sig_freqmeas = np.array([4.68626152e-05, 3.07191283e-05, 4.60552057e-05, 4.21223071e-05
		, 3.79943614e-05, 4.46567979e-05, 2.30712922e-05, 3.38884517e-05
		, 2.91634718e-05, 4.15365507e-05, 4.19702372e-05, 3.18935025e-05
		, 3.29055853e-05, 3.50656414e-05, 3.78836502e-05, 3.34085391e-05])
		Qimeas = np.array([153541.95324237, 165333.43587274, 170693.9892177, 170547.99705661
		, 177982.64511573, 183979.97429627, 197452.22789624, 210750.69411117
		, 222056.83321065, 236816.03737779, 245887.87171326, 264671.2274391
		, 289350.08470299, 318655.91587247, 346578.2093801, 374833.76445621])
		dQimeas = 1./Qimeas
		sig_dQimeas = np.array([1.16805082e-07, 9.62300033e-08, 9.42564698e-08, 1.09142614e-07
		, 1.31994930e-07, 1.07870399e-07, 8.25963076e-08, 1.23503889e-07
		, 1.29114782e-07, 1.02903425e-07, 9.87996189e-08, 9.60610510e-08
		, 1.13802259e-07, 1.08088313e-07, 1.13077377e-07, 9.08190548e-08])
		#freqmeas = np.array([351.49361183, 351.49319581, 351.49339304, 351.49339469, 351.49320691
		#, 351.49323746, 351.49325706, 351.49326171, 351.4933004, 351.49330124
		#, 351.49341537, 351.49355111, 351.49343068, 351.49361161, 351.49379797
		#, 351.49425972])
		#sig_freqmeas = np.array([1.04267512e-04, 5.14685011e-04, 6.20310241e-05, 5.18931762e-05
		#, 1.23479987e-03, 3.35372389e-05, 2.96802475e-05, 2.35327062e-05
		#, 2.17001922e-05, 1.21180606e-04, 1.90923318e-05, 4.02830495e-04
		#, 1.32966532e-05, 1.33945751e-05, 1.19987124e-05, 1.87964373e-03])
		#Qimeas = np.array([153857.91685641, 154396.62325937, 170077.6257633, 170325.74883539
		#, 177585.31324639, 184089.39673471, 182487.81700332, 209708.15064529
		#, 222202.09436609, 202592.80608566, 245251.08377918, 202130.86768522
		#, 289591.08363524, 318385.14913663, 346955.86386662, 309941.11298699])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([3.10671901e-07, 6.90147028e-06, 1.67220467e-07, 1.45559321e-07
		#, 1.74524165e-07, 1.15074856e-07, 6.81899209e-06, 6.06969977e-08
		#, 5.58056029e-08, 8.28309965e-06, 7.58386420e-08, 1.15440588e-05
		#, 5.13445416e-08, 4.13844366e-08, 3.15315473e-08, 8.94380905e-06])

		#Qimeas = np.array([153586.56109561, 165746.27239178, 170557.52411387, 170381.1119051
		#, 177772.62301767, 184058.36829263, 197586.21570551, 209981.24706426
		#, 222441.18982681, 237952.59391405, 245506.61075019, 264439.26505927
		#, 289734.68242623, 319073.55479332, 347164.4260246, 375270.49109985])
		#dQimeas = 1./Qimeas
		#sig_dQimeas = np.array([2.95211265e-07, 2.34001381e-07, 1.81937536e-07, 1.47432975e-07
		#, 1.20155065e-07, 9.63127047e-08, 7.53730973e-08, 6.42647294e-08
		#, 2.28747336e-08, 4.54299246e-08, 4.16248859e-08, 3.61790885e-08
		#, 3.23313524e-08, 2.95075824e-08, 2.87739551e-08, 2.55793026e-08])

	else:
		exit()

	P_nominal = -90
	modelQ = lambda T, x, y, z, w: modelQ_full(T, P_nominal, Pc_nominal, x, y, z, w)
	modelx = lambda T, x, y, z, w: modelx_full(T, P_nominal, Pc_nominal, x, y, z, w)
	tmask = temps < 800e-3
	f00 = np.median(freqs[:3])
	f00meas = np.median(freqmeas[:3])
	T_fine = np.r_[90:480:1000j]*1e-3
	P_uncertainity = 0.25#dB
	sig_syst = 0*dQis/(1+10**(P_nominal-Pc_nominal))*10**(P_nominal-Pc_nominal)*P_uncertainity
	#sig_syst = 0.5*dQis*10**(-(1-Pc_nominal))
	sig_dQis = np.sqrt(sig_dQis**2 + sig_syst**2)
	xMBpopt, xMBpcov = optimize.curve_fit(modelxMB_full, temps[tmask], freqs[tmask]*1e6,
			sigma=sig_freqs[tmask]*1e6, absolute_sigma=True, p0=[f00, Tc0, alphak],
			bounds=([0, 0, 0], [np.inf, np.inf, 1]))
	dQMBconstpopt, dQMBconstpcov = optimize.curve_fit(modeldQMB_full,
			temps[tmask], dQis[tmask], sigma=sig_dQis[tmask],
			absolute_sigma=True, p0=[Tc0, xMBpopt[2], 5e-5],
			bounds=([0, 0, 0], [np.inf, 1, np.inf]))
	Tc = xMBpopt[1]
	alpha = xMBpopt[2]
	f0_fit = xMBpopt[0]
	xtemp = (freqs - f00)/f00*1e6
	xtemp -= xtemp[0]
	xpow = (freqmeas - f00meas)/f00meas*1e6
	sig_xtemp = sig_freqs/f00*1e6
	sig_xpow = sig_freqmeas/f00meas*1e6
	popt, pcov = optimize.curve_fit(modelQ, temps[tmask], dQis[tmask],
			sigma=sig_dQis[tmask], absolute_sigma=True, p0=[Tc0] + p0,
			bounds=([0, 0,0,0], [np.inf, 1,np.inf,np.inf]))
	xpopt, xpcov = optimize.curve_fit(modelx, temps[tmask], freqs[tmask]*1e6,
			sigma=sig_freqs[tmask]*1e6, absolute_sigma=True, p0=[Tc0] + p0,
			bounds=([0,0,0,0], [np.inf,1,np.inf,np.inf]))
	xpopt[-1] = dQMBconstpopt[-1]
	print (popt)
	print (xpopt)
	print (xMBpopt)
	print (dQMBconstpopt)
	print (f0_fit, alpha)
	#continue
	#print ((modelxMB_full(T_fine, *xMBpopt) - f0_fit*1e6)/(f0_fit*1e6)*1e6)
	dQ_fit = modelQ(T_fine, *popt)
	dQx_fit = modelQ(T_fine, *xpopt)
	xdQ_fit = (modelx(T_fine, *popt)/1e6 - f00)/f00*1e6
	x_fit = (modelx(T_fine, *xpopt)/1e6 - f00meas)/f00meas*1e6
	#exit()
	dQxMB_fit = modeldQMB_full(T_fine, *dQMBconstpopt)
	fMB_fit = modelxMB_full(T_fine, *xMBpopt)/1e6
	xMB_fit = (modelxMB_full(T_fine, *xMBpopt)/1e6 - f0_fit)/f0_fit*1e6
	xMB_fit -= xMB_fit[0]
	#print (xMB_fit)
	#exit()
	# Now I'll use the best fit result to model what
	PdBm = np.r_[-110:-80:100j]
	#P = 1e-3*10**(PdBm/10)
	Tbase = 80e-3
	##dQ = modelQ_full(Tbase, P, Pc_nominal, *p0)
	##Q = 1./dQ

	Pmeas = np.array([-110, -108, -106, -104, -102, -100, -98, -96, -94, -92, -90,
			-88, -86, -84 , -82, -80])
	#mask = Pmeas > -94
	#mask = np.logical_and(mask, Pmeas < -84)
	pmask = np.ones_like(Pmeas, dtype=bool)
	#pmask = np.logical_or(Pmeas < -90, Pmeas > -84)
	#pmask = np.logical_and(pmask, Pmeas > -106)

	modelQ_p = lambda P, x, y, z: modelQ_full(Tbase, P, x, Tc, alpha, y, z)
	p0_p = [-96.6] + p0[1:]
	p0_p = [-96.6, 5.3e-6, 3.3e-6]
	p0_sum = [-96.6, 5.3e-5, -83.3, 4.72e-6, 3.4e-6]
	T_uncertainity = 2e-3
	sig_syst = 0*dQimeas*(T_uncertainity/Tbase)
	sig_dQimeas = np.sqrt(sig_dQimeas**2 + sig_syst**2)
	popt_p, pcov_p = optimize.curve_fit(modelQ_p, Pmeas[pmask], dQimeas[pmask],
			sigma=sig_dQimeas[pmask], absolute_sigma=False, p0=p0_p,
			bounds=([-np.inf,0,0], [np.inf,np.inf,np.inf]))
	print (popt_p)
	print (np.sqrt(np.diag(pcov_p)))
	dQ = modelQ_p(PdBm, *popt_p)


	tdata = np.hstack([temps[tmask],np.ones_like(Pmeas[pmask])*Tbase])
	pdata = np.hstack([np.ones_like(temps[tmask])*P_nominal, Pmeas[pmask]])
	xdata = [tdata, pdata]
	ydata = np.hstack([dQis[tmask], dQimeas[pmask]])
	sigydata = np.hstack([sig_dQis[tmask], sig_dQimeas[pmask]])
	fullwrapper = lambda x, Pc, Tc, alpha, fd,dQ0: modelQ_full(x[0], x[1], Pc,
			Tc, alpha, fd, dQ0)
	p0_full = np.zeros(5)
	p0_full[0] = popt_p[0]
	p0_full[1] = Tc
	p0_full[2] = popt[1]
	p0_full[3:] = popt_p[2:]
	popt_full, pcov_full = optimize.curve_fit(fullwrapper, xdata, ydata,
			sigma=sigydata, absolute_sigma=False, p0=p0_full,
			bounds=([-np.inf,0,0,0,0], [np.inf,np.inf,1,np.inf,np.inf]))
	print (popt_full)
	print (np.sqrt(np.diag(pcov_full)))
	dQPfull = modelQ_full(Tbase, PdBm, *popt_full)
	dQTfull = modelQ_full(T_fine, P_nominal, *popt_full)
	xPfull = (modelx_full(Tbase, PdBm, *popt_full)/1e6 - f0_fit)/f0_fit*1e6
	xPfull -= xPfull[0]
	xTfull = (modelx_full(T_fine, P_nominal, *popt_full)/1e6 - f0_fit)/f0_fit*1e6
	xTfull -= xTfull[0]
	xTonlyT = (modelx_full(T_fine, P_nominal, popt_full[0], *popt)/1e6 - f0_fit)/f0_fit*1e6
	xTonlyT -= xTonlyT[0]

	popt_full, pcov_full = optimize.curve_fit(fullwrapper, xdata, ydata,
			sigma=sigydata, absolute_sigma=False, p0=p0_full,
			bounds=([-np.inf,0,0,0,0], [np.inf,np.inf,1,np.inf,np.inf]))
	plt.figure(figsize=(10,10))
	plt.errorbar(temps*1e3, dQis*1e6, sig_dQis*1e6, fmt='ko', label='data')
	plt.plot(T_fine/1e-3, dQ_fit*1e6, 'k-', label='fit dQ(T)')
	plt.plot(T_fine/1e-3, dQx_fit*1e6, 'k-.', label='fit x(T)')
	plt.plot(T_fine/1e-3, dQxMB_fit*1e6, 'k:', label='fit dQ_MB(T)')
	plt.plot(T_fine/1e-3, dQTfull*1e6, 'k--', label='fit dQ(T, P)')
	plt.yscale('log')
	plt.grid()
	plt.legend(loc='upper left')
	#plt.xlim(left=90, right=300)
	#plt.ylim(top=20, bottom=-300)
	plt.xlabel('Temperature [mK]')
	plt.ylabel(r'1/Qi (x$10^{-6}$)')
	plt.savefig('fig/reso%d_dQvsT.png'%reso)
	plt.show()

	plt.figure(figsize=(10,10))
	plt.errorbar(Pmeas, dQimeas*1e6, sig_dQimeas*1e6, fmt='ko', label='data')
	plt.plot(PdBm, dQ*1e6, 'k-', label='fit P')
	plt.plot(PdBm, dQPfull*1e6, 'k--', label='fit both T and P')
	plt.grid()
	plt.legend(loc='upper right')
	#plt.axis('tight')
	#plt.xlim(right=300)
	#plt.ylim(top=20, bottom=-300)
	plt.xlabel('Power [dBm]')
	plt.ylabel(r'1/Qi (x$10^{-6}$)')
	plt.savefig('fig/reso%d_dQvsP.png'%reso)
	plt.show()


	plt.figure(figsize=(10,10))
	plt.errorbar(temps[tmask]/1e-3, xtemp[tmask], sig_xtemp[tmask], fmt='ko', label='data')
	plt.plot(T_fine/1e-3, xdQ_fit, 'k-', label='fit dQ(T)')
	plt.plot(T_fine/1e-3, x_fit, 'k-.', label='fit x(T)')
	plt.plot(T_fine/1e-3, xMB_fit, 'k:', label='fit xMB(T)')
	plt.plot(T_fine/1e-3, xTonlyT, 'k', label='fit x(T, P)')
	plt.plot(T_fine/1e-3, xTfull, 'k--', label='fit dQ(T, P)')
	plt.grid()
	plt.legend(loc='lower left')
	plt.xlim(left=90, right=300)
	plt.ylim(top=20, bottom=-300)
	plt.xlabel('Temperature [mK]')
	plt.ylabel(r'x [ppm]')
	plt.savefig('fig/reso%d_xvsT.png'%reso)
	plt.show()

	plt.figure(figsize=(10,10))
	plt.errorbar(Pmeas, xpow, sig_xpow, fmt='ko', label='data')
	#plt.errorbar(Pmeas, dQimeas*1e6, sig_dQimeas*1e6, fmt='ko', label='data')
	#plt.plot(PdBm, dQ*1e6, 'k-', label='fit P')
	plt.plot(PdBm, xPfull, 'k--', label='fit both T and P')
	plt.grid()
	plt.legend(loc='upper right')
	#plt.axis('tight')
	#plt.xlim(right=300)
	#plt.ylim(top=20, bottom=-300)
	plt.xlabel('Power [dBm]')
	plt.ylabel(r'x [ppm]')
	plt.savefig('fig/reso%d_xvsP.png'%reso)
	plt.show()
	#exit()

	#continue
	#samples = np.random.multivariate_normal(popt, pcov, 2000000)
	#usable_samples = []
	#for i in range(samples.shape[0]):
	#	if np.any(samples[i,:] < 0): continue
	#	usable_samples.append(samples[i, :])
	#usable_samples = np.array(usable_samples)

	#fig = corner.corner(usable_samples, labels=[r"$\alpha_k$", "$F \delta$", "$1/Q_0$"],
	#	  truths=popt, quantiles=(0.16, 0.84), levels=(1-np.exp(-0.5),),
	#	  show_titles=True, fontsize=12, title_fmt=".4e", title_kwargs={"fontsize":20})
	#ndim = 3
	#axes = np.array(fig.axes).reshape((ndim,ndim))
	#for i in range(ndim):
	#	for j in range(ndim):
	#		if j > i: continue
	#		if j == 0:
	#			axes[i,j].tick_params(axis='y', which='major', labelsize=20)
	#			axes[i,j].yaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		if i == (ndim-1):
	#			axes[i,j].tick_params(axis='x', which='major', labelsize=20)
	#			axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		if i == j:
	#			axes[i,j].set_title(axes[i,j].get_title(), fontsize=25)

	#		#if i > 0:
	#		#	axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		#else:
	#		#	axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1f}'))
	## I'll also overplot the common best fit parameters from the powersweep fits
	## Loop over the diagonal
	#for i in range(ndim):
	#	if i == 0: continue
	#	ax = axes[i, i]
	#	ax.axvline(popt_p[i], color="r")

	## Loop over the histograms
	#for yi in range(ndim):
	#	if yi == 0: continue
	#	for xi in range(yi):
	#		ax = axes[yi, xi]
	#		ax.axvline(popt_p[xi], color="r")
	#		ax.axhline(popt_p[yi], color="r")
	#		ax.plot(popt_p[xi], popt_p[yi], "sr")
	#fig.savefig("fig/reso%d_triangledQvsT.png"%(reso))
	##plt.show()
	#plt.close()



	#samples = np.random.multivariate_normal(popt_p, pcov_p, 2000000)
	#usable_samples = []
	#for i in range(samples.shape[0]):
	#	if np.any(samples[i,1:] < 0): continue
	#	usable_samples.append(samples[i, :])
	#usable_samples = np.array(usable_samples)

	#fig = corner.corner(usable_samples, labels=[r"$P_c$", "$F \delta$", "$1/Q_0$"],
	#	  truths=popt_p, quantiles=(0.16, 0.84), levels=(1-np.exp(-0.5),),
	#	  show_titles=True, fontsize=12, title_fmt=".4e", title_kwargs={"fontsize":20})
	#ndim = 3
	#axes = np.array(fig.axes).reshape((ndim,ndim))
	#for i in range(ndim):
	#	for j in range(ndim):
	#		if j > i: continue
	#		if j == 0:
	#			axes[i,j].tick_params(axis='y', which='major', labelsize=20)
	#			axes[i,j].yaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		if i == (ndim-1):
	#			axes[i,j].tick_params(axis='x', which='major', labelsize=20)
	#			axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		if i == j:
	#			axes[i,j].set_title(axes[i,j].get_title(), fontsize=25)

	#		#if i > 0:
	#		#	axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		#else:
	#		#	axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1f}'))
	## I'll also overplot the common best fit parameters from the powersweep fits
	## Loop over the diagonal
	#for i in range(ndim):
	#	if i == 0: continue
	#	ax = axes[i, i]
	#	ax.axvline(popt[i], color="r")

	## Loop over the histograms
	#for yi in range(ndim):
	#	if yi == 0: continue
	#	for xi in range(yi):
	#		ax = axes[yi, xi]
	#		ax.axvline(popt[xi], color="r")
	#		ax.axhline(popt[yi], color="r")
	#		ax.plot(popt[xi], popt[yi], "sr")
	#fig.savefig("fig/reso%d_triangledQvsP.png"%(reso))
	##plt.show()
	#plt.close()



	## Combined Fisher matrices
	#fisher1 = np.linalg.inv(pcov)
	#fisher2 = np.linalg.inv(pcov_p)

	#fisher_comb = np.zeros((4,4))
	#fisher_comb[0,0] = fisher2[0,0]
	#fisher_comb[0, 2:] = fisher2[0, 1:]
	#fisher_comb[2:, 0] = fisher2[1:, 0]
	#fisher_comb[2:, 2:] = fisher2[1:, 1:]
	#fisher_comb[1:, 1:] += fisher1

	#pcov_comb = np.linalg.inv(fisher_comb)
	#popt_comb = np.zeros(4)
	#popt_comb[0] = popt_p[0]
	#popt_comb[1] = popt[0]
	#popt_comb[2:] = popt_p[1:]
	#popt_comb[-1] = popt[-1]
	#popt_comb_alt = np.zeros(4)
	#popt_comb_alt[0] = popt_p[0]
	#popt_comb_alt[1:] = popt[:]
	#popt_comb_alt[-1] = popt_p[-1]
	#print (popt_comb)
	#print (popt_comb_alt)
	##exit()
	#samples = np.random.multivariate_normal(popt_full, pcov_full, 2000000)
	#usable_samples = []
	#for i in range(samples.shape[0]):
	#	if np.any(samples[i,1:] < 0): continue
	#	usable_samples.append(samples[i, :])
	#usable_samples = np.array(usable_samples)

	#fig = corner.corner(usable_samples, labels=[r"$P_c$", r"$\alpha_k$", r"$F \delta$", r"$1/Q_0$"],
	#	  truths=popt_full, quantiles=(0.16, 0.84), levels=(1-np.exp(-0.5),),
	#	  show_titles=True, fontsize=12, title_fmt=".4e", title_kwargs={"fontsize":20})
	#ndim = 4
	#axes = np.array(fig.axes).reshape((ndim,ndim))
	#for i in range(ndim):
	#	for j in range(ndim):
	#		if j > i: continue
	#		if j == 0:
	#			axes[i,j].tick_params(axis='y', which='major', labelsize=20)
	#			axes[i,j].yaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		if i == (ndim-1):
	#			axes[i,j].tick_params(axis='x', which='major', labelsize=20)
	#			axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		if i == j:
	#			axes[i,j].set_title(axes[i,j].get_title(), fontsize=25)

	#		#if i > 0:
	#		#	axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1e}'))
	#		#else:
	#		#	axes[i,j].xaxis.set_major_formatter(StrMethodFormatter('{x:,.1f}'))
	## I'll also overplot the common best fit parameters from the powersweep fits
	## Loop over the diagonal
	#for i in range(ndim):
	#	if i == 0: continue
	#	ax = axes[i, i]
	#	ax.axvline(popt_comb[i], color="g")
	#	ax.axvline(popt_comb_alt[i], color="r")

	## Loop over the histograms
	#for yi in range(ndim):
	#	for xi in range(yi):
	#		ax = axes[yi, xi]
	#		ax.axvline(popt_comb_alt[xi], color="r")
	#		ax.axhline(popt_comb_alt[yi], color="r")
	#		ax.plot(popt_comb_alt[xi], popt_comb_alt[yi], "sr")
	#		ax.axvline(popt_comb[xi], color="g")
	#		ax.axhline(popt_comb[yi], color="g")
	#		ax.plot(popt_comb[xi], popt_comb[yi], "sg")
	#fig.savefig("fig/reso%d_triangledQvsPandQvsTcombined.png"%(reso))
	##plt.show()
	#plt.close()
exit()



mask = Pmeas < -102
p0_p = [-100, 7e-7]
modelQ_TLS2 = lambda P, Pc, fd: modelQ_TLS(P, Pc, fd, 0)
popt_p, pcov_p = optimize.curve_fit(modelQ_TLS2, Pmeas[mask], dQres[mask],
		sigma=sig_dQimeas[mask], p0=p0_p)#, bounds=([-np.inf,0,0], [np.inf,np.inf,np.inf]))
Pc2, fd2, dQ2 = popt_p
dQ = modelQ_TLS2(PdBm[mask], Pc2, fd2, dQ2)
plt.figure(figsize=(10,10))
plt.plot(Pmeas, dQres*1e6, 'ko', label='data')
plt.grid()
#plt.axis('tight')
#plt.xlim(right=300)
#plt.ylim(top=20, bottom=-300)
plt.xlabel('Power [dBm]')
plt.ylabel(r'1/Qi (x$10^{-6}$)')
plt.show()


















exit()
#Want to attempt a Bayesian Odds Ratio comparison here
probMB = lambda f0, alphak: np.exp(lnprob_MB([f0, alphak],temps, freqs, sig_freqs))
probMBTLS = lambda f0, alphak, fd: np.exp(lnprob_MBTLS([f0, alphak, fd],temps, freqs, sig_freqs))
E_MB = integrate.dblquad(probMB, 300, 310, 0, 1)
print (E_MB)
E_MBTLS = integrate.tplquad(probMBTLS, 300, 310, 0, 1, 0, 1.2e-4)
print (E_MBTLS)

popt_MB = [305.8640, 0.3739]
popt_MBTLS = [305.8585, 0.3824, 1.1823e-4]
print (probMB(305.8640, 0.3739))
print (probMBTLS(305.8585, 0.3824, 1.1823e-4))
print ((freqs - model_MB(temps, 305.86, 0.382))/sig_freqs)
print ((freqs - model_MBTLS(temps, 305.86, 0.382, 1.182e-4))/sig_freqs)

BIC_MB = -2*lnprob_MB([305.8640, 0.3739], temps, freqs, sig_freqs) + 2*np.log(temps.size)
print (BIC_MB)
BIC_MBTLS = -2*lnprob_MBTLS([305.8585, 0.3824, 1.1823e-4], temps, freqs, sig_freqs) + 3*np.log(temps.size)
print (BIC_MBTLS)

f_MB = model_MB(temps, *popt_MB)
x_MB = (f_MB - popt_MB[0])/popt_MB[0]*1e6
f_MBTLS = model_MBTLS(temps, *popt_MBTLS)
x_MBTLS = (f_MBTLS - popt_MBTLS[0])/popt_MBTLS[0]*1e6

res_MB = (freqs - popt_MB[0])/popt_MB[0]*1e6 - x_MB
sigx_MB = sig_freqs/popt_MB[0]*1e6
res_MBTLS = (freqs - popt_MBTLS[0])/popt_MBTLS[0]*1e6 - x_MBTLS
sigx_MBTLS = sig_freqs/popt_MBTLS[0]*1e6

T_fine = np.r_[90:480:1000j]*1e-3
f_MBfine = model_MB(T_fine, *popt_MB)
x_MBfine = (f_MBfine - popt_MB[0])/popt_MB[0]*1e6
f_MBTLSfine = model_MBTLS(T_fine, *popt_MBTLS)
x_MBTLSfine = (f_MBTLSfine - popt_MBTLS[0])/popt_MBTLS[0]*1e6

plt.figure(figsize=(10,10))
plt.errorbar(temps*1e3, (freqs - freqs[0])/freqs[0]*1e6, sigx_MB, fmt='ko', label='data')
plt.plot(T_fine/1e-3, x_MBfine, 'k', label='MB')
plt.plot(T_fine/1e-3, x_MBTLSfine, 'k-.', label='MB + TLS')
plt.grid()
plt.xlim(right=300)
plt.ylim(top=20, bottom=-300)
plt.xlabel('Temperature [mK]')
plt.ylabel('Frequency Shift [ppm]')
plt.show()

plt.figure(figsize=(10,10))
plt.errorbar(temps*1e3, (freqs-freqs[0])*1e3, sig_freqs, fmt='ko', label='data')
plt.plot(T_fine/1e-3, (f_MBfine-f_MBfine[0])*1e3, 'k', label='MB')
plt.plot(T_fine/1e-3, (f_MBTLSfine-f_MBTLSfine[0])*1e3, 'k-.', label='MB + TLS')
plt.grid()
plt.xlim(left=100, right=300)
plt.ylim(top=10, bottom=-100)
plt.xlabel('Temperature [mK]')
plt.ylabel('Frequency Shift [kHz]')
plt.show()

#T = np.r_[90:300:1000j]*1e-3
#f = 305.9e6
#eta = h*f/(2*k*T)
#xtls = (Fd/pi)*(np.real(digamma(0.5 + eta/pi/1j) - np.log(2*eta)))
#dQtls = Fd*np.tanh(eta)
#
#
#nqp = 2*N0*np.sqrt(2*Delta*pi*k*T)*np.exp(-Delta/k/T)
#S1 = np.sinh(eta)*K0(eta)*np.exp(-Delta/k/T)
#S2 = 1 + np.sqrt(2*Delta/(pi*k*T))*np.exp(-eta)*I0(eta)
#xmb = -alphak*S2*nqp/(4*N0*Delta)
#dQmb = 4*alphak/pi*S1
#x = xmb + xtls
#dQ = dQmb + dQtls
#
#
#plt.figure(figsize=(10,10))
#plt.plot(T/1e-3, xmb/1e-6, 'k', label='MB')
#plt.plot(T/1e-3, xtls/1e-6, 'k--', label='TLS')
#plt.plot(T/1e-3, x/1e-6, 'k-.', label='MB + TLS')
#plt.grid()
#plt.xlabel('T [mK]')
#plt.ylabel('x [ppm]')
#plt.legend(loc='lower left')
#plt.show()
#
#
#
#plt.figure(figsize=(10,10))
#plt.plot(T/1e-3, dQmb/1e-6, 'k', label='MB')
#plt.plot(T/1e-3, dQtls/1e-6, 'k--', label='TLS')
#plt.plot(T/1e-3, dQ/1e-6, 'k-.', label='MB + TLS')
#plt.grid()
#plt.xlabel('T [mK]')
#plt.ylabel(r'dQ (x$10^{-6}$)')
#plt.legend(loc='upper left')
#plt.show()
#exit()

################################################################################
