%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.62.0 (http://poppler.freedesktop.org)
%%Creator: matplotlib 3.1.1, http://matplotlib.org
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 689 680
%%HiResBoundingBox: 0 0 688.65 679.126563
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_14_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1135 -354 1481 1191] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 22 dict def
CharProcs begin
/K {
694 0 95 0 651 694 setcachedevice
q
95 0 m
95 694 l
181 694 l
181 323 l
544 694 l
637 694 l
369 420 l
369 419 l
651 0 l
557 0 l
314 363 l
181 228 l
181 0 l
95 0 l
f
Q
} def
/Q {
736 0 55 -124 680 716 setcachedevice
q
55 345 m
55 451 86 539 148 610 c
210 680 283 716 367 716 c
451 716 525 680 587 608 c
649 536 680 448 680 345 c
680 215 631 111 533 33 c
652 -124 l
547 -124 l
463 -4 l
427 -15 395 -21 367 -21 c
281 -21 208 14 147 85 c
85 155 55 242 55 345 c
142 344 m
142 258 163 186 207 128 c
250 70 304 42 368 42 c
378 42 397 45 424 51 c
323 195 l
412 195 l
490 90 l
491 90 l
559 151 593 236 593 344 c
593 432 571 506 527 564 c
483 622 430 652 366 652 c
365 652 l
300 650 247 620 205 562 c
163 503 142 430 142 344 c
f
Q
} def
/T {
680 0 35 0 643 689 setcachedevice
q
35 623 m
35 689 l
643 689 l
643 623 l
501 623 l
384 624 l
384 0 l
295 0 l
295 624 l
177 623 l
35 623 l
f
Q
} def
/a {
480 0 44 -10 400 461 setcachedevice
q
44 113 m
44 137 53 159 72 177 c
90 195 115 209 145 218 c
175 227 205 234 234 238 c
263 242 292 245 322 245 c
322 279 l
320 321 312 352 296 371 c
279 391 258 401 233 401 c
181 401 131 384 83 350 c
77 417 l
127 446 179 461 234 461 c
280 461 318 445 349 415 c
380 385 397 348 400 305 c
400 0 l
324 0 l
324 35 l
321 32 315 28 305 22 c
295 16 277 9 249 1 c
221 -6 190 -10 158 -10 c
120 -10 91 3 72 30 c
53 56 44 84 44 113 c
117 114 m
117 96 125 81 143 69 c
161 57 183 51 210 51 c
238 51 264 57 287 69 c
310 81 322 101 322 130 c
322 193 l
301 193 280 191 259 189 c
237 186 215 182 193 177 c
170 171 152 163 138 152 c
124 141 117 128 117 114 c
f
Q
} def
/bracketleft {
289 0 100 -249 266 750 setcachedevice
q
100 -249 m
100 750 l
266 750 l
266 689 l
175 689 l
175 -188 l
266 -188 l
266 -249 l
100 -249 l
f
Q
} def
/bracketright {
289 0 21 -249 187 750 setcachedevice
q
21 -188 m
111 -188 l
111 689 l
21 689 l
21 750 l
187 750 l
187 -249 l
21 -249 l
21 -188 l
f
Q
} def
/e {
444 0 34 -10 414 461 setcachedevice
q
34 226 m
34 292 54 347 94 393 c
134 438 182 461 236 461 c
256 461 275 457 293 451 c
311 445 329 434 347 420 c
365 405 381 383 393 354 c
405 324 412 289 414 249 c
414 220 l
104 220 l
106 170 121 129 150 98 c
178 66 212 51 252 51 c
302 51 353 69 404 106 c
410 40 l
359 6 306 -10 252 -10 c
188 -10 136 13 95 60 c
54 106 34 162 34 226 c
109 275 m
357 275 l
353 301 345 323 335 341 c
325 359 313 371 300 379 c
287 387 275 392 265 395 c
255 397 245 399 236 399 c
202 399 174 386 152 360 c
130 334 115 305 109 275 c
f
Q
} def
/five {
500 0 38 -21 449 655 setcachedevice
q
38 76 m
72 132 l
109 70 161 40 228 40 c
261 40 291 52 318 78 c
345 104 359 146 359 205 c
359 259 349 300 329 326 c
309 352 285 366 257 366 c
211 366 175 339 147 286 c
79 286 l
79 655 l
416 655 l
416 591 l
152 591 l
152 386 l
186 413 221 427 259 427 c
310 427 354 405 392 362 c
430 319 449 266 449 204 c
449 140 427 86 383 43 c
339 0 288 -21 229 -21 c
191 -21 155 -12 121 5 c
87 22 59 46 38 76 c
f
Q
} def
/four {
500 0 27 0 471 655 setcachedevice
q
27 171 m
27 171 27 187 27 219 c
27 227 30 237 38 250 c
280 655 l
372 655 l
372 232 l
471 232 l
471 171 l
372 171 l
372 0 l
292 0 l
292 171 l
27 171 l
105 232 m
298 232 l
298 618 l
294 593 284 564 269 530 c
254 496 240 467 227 443 c
213 419 184 369 139 291 c
124 265 113 246 105 232 c
f
Q
} def
/i {
239 0 74 0 164 679 setcachedevice
q
q
[1 0 0 1 0 0] cm
81 0 75 445 re
f
Q
q
[1 0 0 1 1 415] cm
73 175 90 89 re
f
Q
Q
} def
/m {
794 0 80 0 714 455 setcachedevice
q
80 0 m
80 450 l
153 450 l
153 380 l
191 430 240 455 299 455 c
363 455 406 428 426 374 c
466 428 517 455 577 455 c
602 455 624 450 642 442 c
660 434 674 424 683 413 c
692 402 699 388 704 371 c
709 353 712 339 713 328 c
713 317 714 304 714 288 c
714 0 l
635 0 l
635 281 l
635 282 635 284 635 287 c
635 289 634 295 633 303 c
631 311 629 318 627 325 c
625 332 621 340 617 349 c
612 357 606 365 600 371 c
593 377 584 383 574 387 c
563 391 551 394 538 394 c
502 394 476 379 460 349 c
444 319 436 282 436 240 c
436 0 l
358 0 l
358 281 l
358 292 357 301 357 308 c
357 314 355 324 351 336 c
347 348 342 358 336 366 c
330 373 320 379 307 385 c
294 391 278 394 260 394 c
224 394 198 379 182 349 c
166 319 158 282 158 240 c
158 0 l
80 0 l
f
Q
} def
/one {
500 0 90 0 425 678 setcachedevice
q
90 554 m
90 612 l
170 612 233 634 281 678 c
300 678 l
300 59 l
425 59 l
425 0 l
95 0 l
95 59 l
220 59 l
220 577 l
180 561 137 554 90 554 c
f
Q
} def
/p {
517 0 81 -194 480 455 setcachedevice
q
81 -194 m
81 445 l
156 445 l
156 396 l
204 435 260 455 322 455 c
368 455 405 432 435 386 c
465 340 480 286 480 224 c
480 155 461 99 424 55 c
387 11 344 -10 294 -10 c
244 -10 199 8 159 46 c
159 -194 l
81 -194 l
159 126 m
159 111 168 95 187 77 c
206 59 229 50 256 50 c
293 50 326 66 356 98 c
386 130 401 171 401 222 c
401 267 388 306 363 340 c
337 374 305 391 265 391 c
257 391 250 390 244 389 c
237 388 231 386 225 384 c
219 382 214 379 209 377 c
204 375 199 372 195 369 c
191 366 187 363 184 361 c
180 358 177 355 174 352 c
171 348 169 346 167 344 c
165 342 164 340 162 338 c
159 334 l
159 126 l
f
Q
} def
/r {
342 0 81 0 326 455 setcachedevice
q
81 0 m
81 450 l
151 450 l
151 360 l
159 372 168 384 180 396 c
191 408 210 420 237 434 c
264 447 294 454 326 455 c
326 388 l
308 387 291 384 274 378 c
256 372 238 363 219 351 c
200 339 185 320 173 295 c
161 269 156 240 156 206 c
156 0 l
81 0 l
f
Q
} def
/seven {
500 0 41 -10 457 656 setcachedevice
q
41 585 m
41 656 l
457 655 l
457 590 l
386 508 331 415 293 311 c
255 206 236 99 236 -10 c
151 -10 l
151 94 170 198 209 300 c
247 402 307 497 389 585 c
41 585 l
f
Q
} def
/six {
500 0 42 -21 457 678 setcachedevice
q
42 323 m
42 423 67 507 118 575 c
168 643 232 678 309 678 c
343 678 379 671 416 658 c
416 598 l
378 612 342 619 309 619 c
270 619 236 605 208 578 c
179 551 159 520 147 486 c
135 452 128 416 126 380 c
146 406 172 426 202 440 c
232 454 263 462 295 462 c
339 462 375 441 404 401 c
439 351 457 292 457 224 c
457 150 434 88 388 40 c
349 0 304 -21 252 -21 c
233 -21 215 -18 197 -13 c
179 -7 161 2 142 17 c
122 32 105 52 91 76 c
77 100 65 134 56 176 c
46 218 42 267 42 323 c
127 220 m
139 100 181 40 251 40 c
285 40 311 51 331 74 c
351 97 364 123 370 151 c
373 165 375 188 375 218 c
375 276 365 319 347 349 c
325 383 294 401 256 401 c
218 401 188 385 164 355 c
140 325 128 289 128 247 c
128 241 128 232 130 220 c
127 220 l
f
Q
} def
/space {
333 0 0 0 0 0 setcachedevice
q
Q
} def
/t {
361 0 18 -10 332 571 setcachedevice
q
18 386 m
18 445 l
104 445 l
104 571 l
174 571 l
174 445 l
315 445 l
315 386 l
174 386 l
174 140 l
174 82 192 53 228 53 c
256 53 285 64 316 86 c
332 27 l
284 2 235 -10 184 -10 c
129 -10 102 32 102 117 c
102 386 l
18 386 l
f
Q
} def
/three {
500 0 41 -21 457 678 setcachedevice
q
41 81 m
52 142 l
73 113 98 90 127 74 c
156 57 179 47 196 44 c
212 41 228 40 244 40 c
280 40 310 53 333 80 c
355 106 367 140 367 182 c
367 220 356 253 334 281 c
312 309 281 323 239 323 c
166 323 l
166 385 l
182 386 195 387 207 388 c
219 389 226 390 230 390 c
233 390 236 391 238 391 c
270 397 296 413 316 439 c
336 465 347 493 347 525 c
347 553 337 575 319 592 c
300 609 276 618 246 618 c
187 618 141 593 107 543 c
103 537 97 527 91 514 c
55 569 l
101 641 165 678 248 678 c
298 678 341 663 376 633 c
411 603 429 567 429 525 c
429 453 392 396 318 354 c
364 338 398 314 422 283 c
445 251 457 217 457 180 c
457 126 436 79 396 39 c
356 -1 305 -21 245 -21 c
163 -21 95 13 41 81 c
f
Q
} def
/two {
500 0 41 0 449 678 setcachedevice
q
41 514 m
73 623 138 678 235 678 c
299 678 350 657 390 615 c
429 573 449 522 449 464 c
449 440 445 419 439 400 c
433 380 420 360 402 338 c
384 316 368 299 354 286 c
340 272 316 251 282 221 c
264 205 210 154 121 70 c
449 71 l
449 0 l
49 0 l
49 65 l
179 194 l
184 199 195 210 213 226 c
231 242 243 252 249 258 c
255 264 265 274 279 288 c
293 302 303 313 309 321 c
314 329 321 339 331 352 c
341 365 347 377 351 387 c
354 397 357 408 361 421 c
364 434 366 447 366 461 c
366 503 352 539 325 569 c
298 598 264 613 222 613 c
199 613 179 607 161 597 c
143 587 130 574 121 559 c
112 544 105 529 99 514 c
93 499 90 486 88 476 c
84 459 l
41 514 l
f
Q
} def
/u {
517 0 80 -10 436 445 setcachedevice
q
80 122 m
80 445 l
158 445 l
158 110 l
158 86 164 70 174 60 c
184 50 206 45 238 45 c
272 45 300 54 321 72 c
342 90 354 112 357 136 c
357 142 358 152 358 165 c
358 445 l
436 445 l
436 0 l
360 0 l
360 48 l
314 9 256 -10 185 -10 c
165 -10 148 -7 134 -1 c
120 5 109 12 102 20 c
95 28 90 39 86 53 c
82 67 80 79 80 87 c
80 95 80 107 80 122 c
f
Q
} def
/zero {
500 0 41 -21 458 678 setcachedevice
q
41 310 m
41 327 l
41 353 41 375 42 395 c
43 414 46 439 52 471 c
57 503 64 530 74 552 c
83 574 97 596 117 618 c
136 640 159 656 186 666 c
206 674 227 678 249 678 c
267 678 285 675 303 670 c
320 665 338 655 358 640 c
377 625 394 606 408 583 c
422 559 434 527 444 486 c
453 445 458 398 458 345 c
458 324 l
458 298 457 276 456 256 c
455 236 452 210 447 180 c
441 149 434 122 424 100 c
414 78 400 56 381 35 c
361 14 338 0 312 -10 c
290 -17 269 -21 249 -21 c
230 -21 212 -18 195 -14 c
178 -9 160 0 140 14 c
120 28 104 46 90 70 c
76 93 64 125 55 167 c
45 208 41 256 41 310 c
119 310 m
119 265 122 226 128 192 c
134 158 141 132 150 113 c
158 94 169 79 181 67 c
193 55 205 48 216 44 c
226 40 238 39 250 39 c
265 39 279 42 293 49 c
306 56 320 68 334 86 c
348 104 359 132 367 170 c
375 208 380 255 380 311 c
380 370 l
380 420 375 463 367 498 c
359 532 347 558 333 574 c
319 590 305 601 292 607 c
278 613 264 616 249 616 c
233 616 219 613 206 607 c
192 601 179 590 165 574 c
151 558 139 532 131 497 c
123 462 119 420 119 370 c
119 310 l
f
Q
} def
end
currentdict end
/T3_14_0 exch definefont pop
%%EndResource
/F14_0 /T3_14_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 688.65 679.126563 re
W
q
1 j
/DeviceGray {} cs
[1] sc
0 j
0 w
[] 0 d
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
0 0 688.65 679.126562 re
f
/DeviceGray {} CS
[0] SC
97.2 83.29375 558 576 re
f
q
97.2 83.29375 558 576 re
W
2 J
3 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
170.277123 680.126562 m
175.426126 660.906475 l
180.578829 642.588008 l
185.731532 625.122635 l
190.884234 608.453273 l
196.036937 592.527801 l
201.18964 577.298526 l
206.342342 562.72173 l
211.495045 548.757261 l
217.22027 533.914517 l
222.945495 519.735699 l
228.670721 506.178257 l
234.395946 493.203182 l
240.121171 480.774646 l
245.846396 468.859682 l
251.571622 457.427911 l
257.296847 446.451285 l
263.594595 434.871801 l
269.892342 423.779868 l
276.19009 413.14618 l
282.487838 402.943717 l
288.785586 393.14753 l
295.083333 383.734544 l
301.953604 373.877801 l
308.823874 364.42604 l
315.694144 355.355594 l
322.564414 346.644587 l
329.434685 338.272776 l
336.877477 329.564357 l
344.32027 321.209943 l
351.763063 313.189139 l
359.205856 305.48307 l
367.221171 297.516181 l
375.236486 289.873838 l
383.251802 282.537367 l
391.267117 275.489483 l
399.854955 268.240251 l
408.442793 261.2857 l
417.030631 254.608971 l
426.190991 247.775783 l
435.351351 241.223424 l
444.511712 234.935704 l
454.244595 228.528226 l
463.977477 222.385981 l
474.282883 216.154481 l
484.588288 210.186317 l
494.893694 204.465972 l
505.771622 198.680861 l
516.64955 193.140343 l
528.1 187.556684 l
540.122973 181.951513 l
552.145946 176.594116 l
564.741441 171.230879 l
577.336937 166.106968 l
590.504955 160.990088 l
604.245495 155.895785 l
617.986036 151.035879 l
632.299099 146.20681 l
647.184685 141.420926 l
655.2 138.938229 l
655.2 138.938229 l
S
Q
q
97.2 83.29375 558 576 re
W
2 w
[7.4 3.2] 0 d
/DeviceRGB {} CS
[1 0 0] SC
/DeviceRGB {} cs
[0 0 0] sc
487.8 83.29375 m
487.8 659.29375 l
S
Q
q
2 J
2 w
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
97.2 83.29375 m
97.2 659.29375 l
S
655.2 83.29375 m
655.2 659.29375 l
S
97.2 83.29375 m
655.2 83.29375 l
S
97.2 659.29375 m
655.2 659.29375 l
S
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
97.2 83.29375 m
97.2 659.29375 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
97.2 83.29375 m
97.2 93.29375 l
f
97.2 83.29375 m
97.2 93.29375 l
S
[1 0 0 1 0 0] Tm
0 0 Td
70.95 54.028125 Td
/F14_0 35 Tf
(100)
[17.5
0
17.5
0
17.5
0] Tj
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
236.7 83.29375 m
236.7 659.29375 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
236.7 83.29375 m
236.7 93.29375 l
f
236.7 83.29375 m
236.7 93.29375 l
S
[1 0 0 1 0 0] Tm
0 0 Td
210.45 54.028125 Td
/F14_0 35 Tf
(200)
[17.5
0
17.5
0
17.5
0] Tj
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
376.2 83.29375 m
376.2 659.29375 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
376.2 83.29375 m
376.2 93.29375 l
f
376.2 83.29375 m
376.2 93.29375 l
S
[1 0 0 1 0 0] Tm
0 0 Td
349.95 54.028125 Td
/F14_0 35 Tf
(300)
[17.5
0
17.5
0
17.5
0] Tj
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
515.7 83.29375 m
515.7 659.29375 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
515.7 83.29375 m
515.7 93.29375 l
f
515.7 83.29375 m
515.7 93.29375 l
S
[1 0 0 1 0 0] Tm
0 0 Td
489.45 54.028125 Td
/F14_0 35 Tf
(400)
[17.5
0
17.5
0
17.5
0] Tj
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
655.2 83.29375 m
655.2 659.29375 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
655.2 83.29375 m
655.2 93.29375 l
f
655.2 83.29375 m
655.2 93.29375 l
S
[1 0 0 1 0 0] Tm
0 0 Td
628.95 54.028125 Td
/F14_0 35 Tf
(500)
[17.5
0
17.5
0
17.5
0] Tj
[1 0 0 1 0 0] Tm
0 0 Td
236.45 16.2 Td
/F14_0 36 Tf
(Temperature [mK])
[24.48
0
15.984
0
28.584
0
18.612
0
15.984
0
12.312
0
17.28
0
12.996
0
18.612
0
12.312
0
15.984
0
11.988
0
10.404
0
28.584
0
24.984
0
10.404
0] Tj
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
97.2 91.664567 m
655.2 91.664567 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
97.2 91.664567 m
107.2 91.664567 l
f
97.2 91.664567 m
107.2 91.664567 l
S
q
[1 0 0 1 44.2 79.031754] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.48125 Td
/F14_0 35 Tf
(1)
[17.5
0] Tj
17.499985 0.48125 Td
(0)
[17.5
0] Tj
35.272587 11.385938 Td
/F14_0 24.5 Tf
(3)
[12.25
0] Tj
Q
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
97.2 233.571862 m
655.2 233.571862 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
97.2 233.571862 m
107.2 233.571862 l
f
97.2 233.571862 m
107.2 233.571862 l
S
q
[1 0 0 1 44.2 220.93905] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.05 Td
/F14_0 35 Tf
(1)
[17.5
0] Tj
17.499985 0.05 Td
(0)
[17.5
0] Tj
35.272587 10.954688 Td
/F14_0 24.5 Tf
(4)
[12.25
0] Tj
Q
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
97.2 375.479158 m
655.2 375.479158 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
97.2 375.479158 m
107.2 375.479158 l
f
97.2 375.479158 m
107.2 375.479158 l
S
q
[1 0 0 1 44.2 362.846346] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.05 Td
/F14_0 35 Tf
(1)
[17.5
0] Tj
17.499985 0.05 Td
(0)
[17.5
0] Tj
35.272587 10.954688 Td
/F14_0 24.5 Tf
(5)
[12.25
0] Tj
Q
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
97.2 517.386454 m
655.2 517.386454 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
97.2 517.386454 m
107.2 517.386454 l
f
97.2 517.386454 m
107.2 517.386454 l
S
q
[1 0 0 1 44.2 504.753642] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.48125 Td
/F14_0 35 Tf
(1)
[17.5
0] Tj
17.499985 0.48125 Td
(0)
[17.5
0] Tj
35.272587 11.385938 Td
/F14_0 24.5 Tf
(6)
[12.25
0] Tj
Q
Q
q
97.2 83.29375 558 576 re
W
0.5 w
[0.5 0.825] 0 d
/DeviceGray {} CS
[0] SC
/DeviceRGB {} cs
[0 0 0] sc
97.2 659.29375 m
655.2 659.29375 l
S
Q
q
/DeviceGray {} cs
[0] sc
1 j
1 w
[] 0 d
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
97.2 659.29375 m
107.2 659.29375 l
f
97.2 659.29375 m
107.2 659.29375 l
S
q
[1 0 0 1 44.2 646.660938] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 0.028125 Td
/F14_0 35 Tf
(1)
[17.5
0] Tj
17.499985 0.028125 Td
(0)
[17.5
0] Tj
35.272587 10.932813 Td
/F14_0 24.5 Tf
(7)
[12.25
0] Tj
Q
97.2 85.171245 m
103.2 85.171245 l
f
97.2 85.171245 m
103.2 85.171245 l
S
97.2 134.382919 m
103.2 134.382919 l
f
97.2 134.382919 m
103.2 134.382919 l
S
97.2 159.371554 m
103.2 159.371554 l
f
97.2 159.371554 m
103.2 159.371554 l
S
97.2 177.101272 m
103.2 177.101272 l
f
97.2 177.101272 m
103.2 177.101272 l
S
97.2 190.85351 m
103.2 190.85351 l
f
97.2 190.85351 m
103.2 190.85351 l
S
97.2 202.089906 m
103.2 202.089906 l
f
97.2 202.089906 m
103.2 202.089906 l
S
97.2 211.590144 m
103.2 211.590144 l
f
97.2 211.590144 m
103.2 211.590144 l
S
97.2 219.819624 m
103.2 219.819624 l
f
97.2 219.819624 m
103.2 219.819624 l
S
97.2 227.078541 m
103.2 227.078541 l
f
97.2 227.078541 m
103.2 227.078541 l
S
97.2 276.290215 m
103.2 276.290215 l
f
97.2 276.290215 m
103.2 276.290215 l
S
97.2 301.278849 m
103.2 301.278849 l
f
97.2 301.278849 m
103.2 301.278849 l
S
97.2 319.008568 m
103.2 319.008568 l
f
97.2 319.008568 m
103.2 319.008568 l
S
97.2 332.760806 m
103.2 332.760806 l
f
97.2 332.760806 m
103.2 332.760806 l
S
97.2 343.997202 m
103.2 343.997202 l
f
97.2 343.997202 m
103.2 343.997202 l
S
97.2 353.49744 m
103.2 353.49744 l
f
97.2 353.49744 m
103.2 353.49744 l
S
97.2 361.72692 m
103.2 361.72692 l
f
97.2 361.72692 m
103.2 361.72692 l
S
97.2 368.985837 m
103.2 368.985837 l
f
97.2 368.985837 m
103.2 368.985837 l
S
97.2 418.197511 m
103.2 418.197511 l
f
97.2 418.197511 m
103.2 418.197511 l
S
97.2 443.186145 m
103.2 443.186145 l
f
97.2 443.186145 m
103.2 443.186145 l
S
97.2 460.915864 m
103.2 460.915864 l
f
97.2 460.915864 m
103.2 460.915864 l
S
97.2 474.668101 m
103.2 474.668101 l
f
97.2 474.668101 m
103.2 474.668101 l
S
97.2 485.904498 m
103.2 485.904498 l
f
97.2 485.904498 m
103.2 485.904498 l
S
97.2 495.404736 m
103.2 495.404736 l
f
97.2 495.404736 m
103.2 495.404736 l
S
97.2 503.634216 m
103.2 503.634216 l
f
97.2 503.634216 m
103.2 503.634216 l
S
97.2 510.893132 m
103.2 510.893132 l
f
97.2 510.893132 m
103.2 510.893132 l
S
97.2 560.104807 m
103.2 560.104807 l
f
97.2 560.104807 m
103.2 560.104807 l
S
97.2 585.093441 m
103.2 585.093441 l
f
97.2 585.093441 m
103.2 585.093441 l
S
97.2 602.823159 m
103.2 602.823159 l
f
97.2 602.823159 m
103.2 602.823159 l
S
97.2 616.575397 m
103.2 616.575397 l
f
97.2 616.575397 m
103.2 616.575397 l
S
97.2 627.811794 m
103.2 627.811794 l
f
97.2 627.811794 m
103.2 627.811794 l
S
97.2 637.312032 m
103.2 637.312032 l
f
97.2 637.312032 m
103.2 637.312032 l
S
97.2 645.541512 m
103.2 645.541512 l
f
97.2 645.541512 m
103.2 645.541512 l
S
97.2 652.800428 m
103.2 652.800428 l
f
97.2 652.800428 m
103.2 652.800428 l
S
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 33.184375 353.739063] Tm
0 0 Td
0 0 Td
/F14_0 36 Tf
(Qi)
[26.496
0
8.604
0] Tj
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_14_0
%%EOF
